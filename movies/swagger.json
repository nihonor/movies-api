{
  "swagger": "2.0",
  "info": {
    "description": "This is a sample server Petstore server. You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/). For this sample, you can use the api key `special-key` to test the authorization filters.",
    "version": "1.0.7",
    "title": "Integrated API",
    "contact": {
      "email": "niyitanganihonor@gmail.com"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "paths": {
    "/api/authi": {
      "post": {
        "tags": [
          "authentication"
        ],
        "summary": "Authenticate user",
        "description": "Authenticates a user by validating the email and password.",
        "parameters": [
          {
            "in": "body",
            "name": "credentials",
            "description": "User credentials",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "email": {
                  "type": "string","example":"niyitanihonr@gmail.com",
                  "format": "email",
                  "description": "User email"
                },
                "password": {
                  "type": "string","example":"mukwi240",
                  "description": "User password"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful authentication",
            "schema": {
              "type": "string",
              "description": "JWT token"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "type": "string",
              "description": "Error message"
            }
          }
        }
      }
    },
    "/api/users": {
      "post": {
        "tags": [
          "Registering"
        ],
        "summary": "Registering a user",
        "description": "Registering a user by using email and password.",
        "parameters": [
          {
            "in": "body",
            "name": "credentials",
            "description": "User credentials",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name":{"type":"string"},
                "email": {
                  "type": "string","example":"niyitanihonr@gmail.com",
                  "format": "email",
                  "description": "User email"
                },
                "password": {
                  "type": "string","example":"mukwi240",
                  "description": "User password"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful authentication",
            "schema": {
              "type": "string",
              "description": "JWT token"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "type": "string",
              "description": "Error message"
            }
          }
        }
      }
    },
    "/api/genres": {
      "get": {
        "tags": [
          "genres"
        ],
        "summary": "Get all genres",
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Genre"
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "genres"
        ],
        "summary": "To add a genre",
        "parameters": [
          {
            "name": "name",
            "in": "body",
            "description": "The name of genre",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets"
            ]
          }
        ]
      }
    },
    "/api/genres/{id}": {
      "get": {
        "tags": [
          "genres"
        ],
        "summary": "Get a genre by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the genre to get",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Genre"
            }
          },
          "404": {
            "description": "Genre not found"
          }
        }
      },
      "put": {
        "tags": [
          "genres"
        ],
        "summary": "Update a genre by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the genre to update",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "in": "body",
            "description": "The updated name of the genre",
            "required": true,
            "schema": {
              "type": "string","example":"horror"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Genre"
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "404": {
            "description": "Genre not found"
          }
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "genres"
        ],
        "summary": "Delete a genre by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the genre to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "404": {
            "description": "Genre not found"
          }
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets"
            ]
          }
        ]
      }
    },
    "/api/customers": {
      "get": {
        "tags": [
          "customers"
        ],
        "summary": "Get all customers",
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Customer"
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "customers"
        ],
        "summary": "Add a new customer",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Customer object that needs to be added",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Customer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Customer"
            }
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/customers/{id}": {
      "get": {
        "tags": [
          "customers"
        ],
        "summary": "Get a customer by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the customer to get",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Customer"
            }
          },
          "404": {
            "description": "Customer not found"
          }
        }
      },
      "put": {
        "tags": [
          "customers"
        ],
        "summary": "Update a customer by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the customer to update",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Updated customer object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Customer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Customer"
            }
          },
          "400": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "customers"
        ],
        "summary": "Delete a customer by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the customer to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "404": {
            "description": "Customer not found"
          }
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets"
            ]
          }
        ]
      }
    },
    "/api/rentals": {
      "get": {
        "tags": [
          "rentals"
        ],
        "summary": "Get all rentals",
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Rental"
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "rentals"
        ],
        "summary": "Create a new rental",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Rental object that needs to be added",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Rental"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Rental"
            }
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/rentals/{id}": {
      "get": {
        "tags": [
          "rentals"
        ],
        "summary": "Get a rental by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the rental to get",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Rental"
            }
          },
          "404": {
            "description": "Rental not found"
          }
        }
      },
      "put": {
        "tags": [
          "rentals"
        ],
        "summary": "Update a rental by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the rental to update",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Updated rental object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Rental"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Rental"
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "404": {
            "description": "Rental not found"
          }
        }
      },
      "delete": {
        "tags": [
          "rentals"
        ],
        "summary": "Delete a rental by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the rental to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "404": {
            "description": "Rental not found"
          }
        }
      }
    }
  },
  "definitions": {
    "Genre": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        }
      }
    },
    "Customer": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "phone": {
          "type": "string"
        }
      }
    },
    "Rental": {
      "type": "object",
      "properties": {
        "customer": {
          "type": "object",
          "properties": {
            "_id": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "phone": {
              "type": "string"
            }
          }
        },
        "movie": {
          "type": "object",
          "properties": {
            "_id": {
              "type": "string"
            },
            "title": {
              "type": "string"
            },
            "dailyRentalRate": {
              "type": "number"
            }
          }
        }
      }
    },
    "ApiResponse": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        }
      }
    },
    "UserRequest": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "email": {
          "type": "string",
          "format": "email"
        },
        "password": {
          "type": "string"
        }
      },
      "required": ["name", "email", "password"]
    },
    "User": {
      "type": "object",
      "properties": {
        "_id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "email": {
          "type": "string",
          "format": "email"
        }
      }
    }
  },
  "securityDefinitions": {
    "JWTAuth": {
      "type": "apiKey",
      "name": "x-auth-token",
      "in": "header"
    },
    "petstore_auth": {
      "type": "oauth2",
      "authorizationUrl": "http://petstore.swagger.io/oauth/dialog",
      "flow": "implicit",
      "scopes": {
        "read:pets": "read your pets",
        "write:pets": "modify pets in your account"
      }
    }
  }
}
